declare var Module: any;
declare var moduleOverrides: {};
declare var ENVIRONMENT_IS_WEB: boolean;
declare var ENVIRONMENT_IS_WORKER: boolean;
declare var ENVIRONMENT_IS_NODE: boolean;
declare var ENVIRONMENT_IS_SHELL: boolean;
declare function globalEval(x: any): void;
declare var Runtime: {
    setTempRet0: (value: any) => void;
    getTempRet0: () => any;
    stackSave: () => number;
    stackRestore: (stackTop: any) => void;
    getNativeTypeSize: (type: any) => number;
    getNativeFieldSize: (type: any) => number;
    STACK_ALIGN: number;
    prepVararg: (ptr: any, type: any) => any;
    getAlignSize: (type: any, size: any, vararg: any) => number;
    dynCall: (sig: any, ptr: any, args: any) => any;
    functionPointers: any[];
    addFunction: (func: any) => number;
    removeFunction: (index: any) => void;
    warnOnce: (text: any) => void;
    funcWrappers: {};
    getFuncWrapper: (func: any, sig: any) => any;
    getCompilerSetting: (name: any) => void;
    stackAlloc: (size: any) => number;
    staticAlloc: (size: any) => number;
    dynamicAlloc: (size: any) => number;
    alignMemory: (size: any, quantum: any) => number;
    makeBigInt: (low: any, high: any, unsigned: any) => number;
    GLOBAL_BASE: number;
    QUANTUM_SIZE: number;
    __dummy__: number;
};
declare var __THREW__: number;
declare var ABORT: boolean;
declare var EXITSTATUS: number;
declare var undef: number;
declare var tempValue: any, tempInt: any, tempBigInt: any, tempInt2: any, tempBigInt2: any, tempPair: any, tempBigIntI: any, tempBigIntR: any, tempBigIntS: any, tempBigIntP: any, tempBigIntD: any, tempDouble: any, tempFloat: any;
declare var tempI64: any, tempI64b: any;
declare var tempRet0: any, tempRet1: any, tempRet2: any, tempRet3: any, tempRet4: any, tempRet5: any, tempRet6: any, tempRet7: any, tempRet8: any, tempRet9: any;
declare function assert(condition: any, text: any): void;
declare var globalScope: any;
declare function getCFunc(ident: any): any;
declare var cwrap: any, ccall: any;
declare function setValue(ptr: any, value: any, type: any, noSafe: any): void;
declare function getValue(ptr: any, type: any, noSafe: any): any;
declare var ALLOC_NORMAL: number;
declare var ALLOC_STACK: number;
declare var ALLOC_STATIC: number;
declare var ALLOC_DYNAMIC: number;
declare var ALLOC_NONE: number;
declare function allocate(slab: any, types: any, allocator: any, ptr: any): any;
declare function getMemory(size: any): number;
declare function Pointer_stringify(ptr: any, length: any): any;
declare function AsciiToString(ptr: any): string;
declare function stringToAscii(str: any, outPtr: any): void;
declare function UTF8ArrayToString(u8Array: any, idx: any): string;
declare function UTF8ToString(ptr: any): string;
declare function stringToUTF8Array(str: any, outU8Array: any, outIdx: any, maxBytesToWrite: any): number;
declare function stringToUTF8(str: any, outPtr: any, maxBytesToWrite: any): number;
declare function lengthBytesUTF8(str: any): number;
declare function UTF16ToString(ptr: any): string;
declare function stringToUTF16(str: any, outPtr: any, maxBytesToWrite: any): number;
declare function lengthBytesUTF16(str: any): number;
declare function UTF32ToString(ptr: any): string;
declare function stringToUTF32(str: any, outPtr: any, maxBytesToWrite: any): number;
declare function lengthBytesUTF32(str: any): number;
declare function demangle(func: any): any;
declare function demangleAll(text: any): any;
declare function jsStackTrace(): any;
declare function stackTrace(): any;
declare var PAGE_SIZE: number;
declare function alignMemoryPage(x: any): any;
declare var HEAP: any;
declare var HEAP8: any, HEAPU8: any, HEAP16: any, HEAPU16: any, HEAP32: any, HEAPU32: any, HEAPF32: any, HEAPF64: any;
declare var STATIC_BASE: number, STATICTOP: number, staticSealed: boolean;
declare var STACK_BASE: number, STACKTOP: number, STACK_MAX: number;
declare var DYNAMIC_BASE: number, DYNAMICTOP: number;
declare function abortOnCannotGrowMemory(): void;
declare function enlargeMemory(): void;
declare var TOTAL_STACK: any;
declare var TOTAL_MEMORY: any;
declare var totalMemory: number;
declare var buffer: any;
declare function callRuntimeCallbacks(callbacks: any): void;
declare var __ATPRERUN__: any[];
declare var __ATINIT__: any[];
declare var __ATMAIN__: any[];
declare var __ATEXIT__: any[];
declare var __ATPOSTRUN__: any[];
declare var runtimeInitialized: boolean;
declare var runtimeExited: boolean;
declare function preRun(): void;
declare function ensureInitRuntime(): void;
declare function preMain(): void;
declare function exitRuntime(): void;
declare function postRun(): void;
declare function addOnPreRun(cb: any): void;
declare function addOnInit(cb: any): void;
declare function addOnPreMain(cb: any): void;
declare function addOnExit(cb: any): void;
declare function addOnPostRun(cb: any): void;
declare function intArrayFromString(stringy: any, dontAddNull: any, length: any): any[];
declare function intArrayToString(array: any): string;
declare function writeStringToMemory(string: any, buffer: any, dontAddNull: any): void;
declare function writeArrayToMemory(array: any, buffer: any): void;
declare function writeAsciiToMemory(str: any, buffer: any, dontAddNull: any): void;
declare function unSign(value: any, bits: any, ignore: any): any;
declare function reSign(value: any, bits: any, ignore: any): any;
declare var Math_abs: (x: number) => number;
declare var Math_cos: (x: number) => number;
declare var Math_sin: (x: number) => number;
declare var Math_tan: (x: number) => number;
declare var Math_acos: (x: number) => number;
declare var Math_asin: (x: number) => number;
declare var Math_atan: (x: number) => number;
declare var Math_atan2: (y: number, x: number) => number;
declare var Math_exp: (x: number) => number;
declare var Math_log: (x: number) => number;
declare var Math_sqrt: (x: number) => number;
declare var Math_ceil: (x: number) => number;
declare var Math_floor: (x: number) => number;
declare var Math_pow: (x: number, y: number) => number;
declare var Math_imul: any;
declare var Math_fround: any;
declare var Math_min: (...values: number[]) => number;
declare var Math_clz32: any;
declare var runDependencies: number;
declare var runDependencyWatcher: any;
declare var dependenciesFulfilled: any;
declare function getUniqueRunDependency(id: any): any;
declare function addRunDependency(id: any): void;
declare function removeRunDependency(id: any): void;
declare var memoryInitializer: any;
declare var ASM_CONSTS: any[];
declare var tempDoublePtr: number;
declare function copyTempFloat(ptr: any): void;
declare function copyTempDouble(ptr: any): void;
declare var _llvm_ctlz_i32: boolean;
declare function _pthread_cleanup_push(routine: any, arg: any): void;
declare function _pthread_cleanup_pop(): void;
declare function _abort(): void;
declare function ___lock(): void;
declare function ___unlock(): void;
declare var ERRNO_CODES: {
    EPERM: number;
    ENOENT: number;
    ESRCH: number;
    EINTR: number;
    EIO: number;
    ENXIO: number;
    E2BIG: number;
    ENOEXEC: number;
    EBADF: number;
    ECHILD: number;
    EAGAIN: number;
    EWOULDBLOCK: number;
    ENOMEM: number;
    EACCES: number;
    EFAULT: number;
    ENOTBLK: number;
    EBUSY: number;
    EEXIST: number;
    EXDEV: number;
    ENODEV: number;
    ENOTDIR: number;
    EISDIR: number;
    EINVAL: number;
    ENFILE: number;
    EMFILE: number;
    ENOTTY: number;
    ETXTBSY: number;
    EFBIG: number;
    ENOSPC: number;
    ESPIPE: number;
    EROFS: number;
    EMLINK: number;
    EPIPE: number;
    EDOM: number;
    ERANGE: number;
    ENOMSG: number;
    EIDRM: number;
    ECHRNG: number;
    EL2NSYNC: number;
    EL3HLT: number;
    EL3RST: number;
    ELNRNG: number;
    EUNATCH: number;
    ENOCSI: number;
    EL2HLT: number;
    EDEADLK: number;
    ENOLCK: number;
    EBADE: number;
    EBADR: number;
    EXFULL: number;
    ENOANO: number;
    EBADRQC: number;
    EBADSLT: number;
    EDEADLOCK: number;
    EBFONT: number;
    ENOSTR: number;
    ENODATA: number;
    ETIME: number;
    ENOSR: number;
    ENONET: number;
    ENOPKG: number;
    EREMOTE: number;
    ENOLINK: number;
    EADV: number;
    ESRMNT: number;
    ECOMM: number;
    EPROTO: number;
    EMULTIHOP: number;
    EDOTDOT: number;
    EBADMSG: number;
    ENOTUNIQ: number;
    EBADFD: number;
    EREMCHG: number;
    ELIBACC: number;
    ELIBBAD: number;
    ELIBSCN: number;
    ELIBMAX: number;
    ELIBEXEC: number;
    ENOSYS: number;
    ENOTEMPTY: number;
    ENAMETOOLONG: number;
    ELOOP: number;
    EOPNOTSUPP: number;
    EPFNOSUPPORT: number;
    ECONNRESET: number;
    ENOBUFS: number;
    EAFNOSUPPORT: number;
    EPROTOTYPE: number;
    ENOTSOCK: number;
    ENOPROTOOPT: number;
    ESHUTDOWN: number;
    ECONNREFUSED: number;
    EADDRINUSE: number;
    ECONNABORTED: number;
    ENETUNREACH: number;
    ENETDOWN: number;
    ETIMEDOUT: number;
    EHOSTDOWN: number;
    EHOSTUNREACH: number;
    EINPROGRESS: number;
    EALREADY: number;
    EDESTADDRREQ: number;
    EMSGSIZE: number;
    EPROTONOSUPPORT: number;
    ESOCKTNOSUPPORT: number;
    EADDRNOTAVAIL: number;
    ENETRESET: number;
    EISCONN: number;
    ENOTCONN: number;
    ETOOMANYREFS: number;
    EUSERS: number;
    EDQUOT: number;
    ESTALE: number;
    ENOTSUP: number;
    ENOMEDIUM: number;
    EILSEQ: number;
    EOVERFLOW: number;
    ECANCELED: number;
    ENOTRECOVERABLE: number;
    EOWNERDEAD: number;
    ESTRPIPE: number;
};
declare var ERRNO_MESSAGES: {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: string;
    9: string;
    10: string;
    11: string;
    12: string;
    13: string;
    14: string;
    15: string;
    16: string;
    17: string;
    18: string;
    19: string;
    20: string;
    21: string;
    22: string;
    23: string;
    24: string;
    25: string;
    26: string;
    27: string;
    28: string;
    29: string;
    30: string;
    31: string;
    32: string;
    33: string;
    34: string;
    35: string;
    36: string;
    37: string;
    38: string;
    39: string;
    40: string;
    42: string;
    43: string;
    44: string;
    45: string;
    46: string;
    47: string;
    48: string;
    49: string;
    50: string;
    51: string;
    52: string;
    53: string;
    54: string;
    55: string;
    56: string;
    57: string;
    59: string;
    60: string;
    61: string;
    62: string;
    63: string;
    64: string;
    65: string;
    66: string;
    67: string;
    68: string;
    69: string;
    70: string;
    71: string;
    72: string;
    73: string;
    74: string;
    75: string;
    76: string;
    77: string;
    78: string;
    79: string;
    80: string;
    81: string;
    82: string;
    83: string;
    84: string;
    86: string;
    87: string;
    88: string;
    89: string;
    90: string;
    91: string;
    92: string;
    93: string;
    94: string;
    95: string;
    96: string;
    97: string;
    98: string;
    99: string;
    100: string;
    101: string;
    102: string;
    103: string;
    104: string;
    105: string;
    106: string;
    107: string;
    108: string;
    109: string;
    110: string;
    111: string;
    112: string;
    113: string;
    114: string;
    115: string;
    116: string;
    122: string;
    123: string;
    125: string;
    130: string;
    131: string;
};
declare function ___setErrNo(value: any): any;
declare var PATH: {
    splitPath: (filename: any) => string[];
    normalizeArray: (parts: any, allowAboveRoot: any) => any;
    normalize: (path: any) => string;
    dirname: (path: any) => string;
    basename: (path: any) => any;
    extname: (path: any) => string;
    join: () => string;
    join2: (l: any, r: any) => string;
    resolve: () => string;
    relative: (from: any, to: any) => string;
};
declare var TTY: {
    ttys: any[];
    init: () => void;
    shutdown: () => void;
    register: (dev: any, ops: any) => void;
    stream_ops: {
        open: (stream: any) => void;
        close: (stream: any) => void;
        flush: (stream: any) => void;
        read: (stream: any, buffer: any, offset: any, length: any, pos: any) => number;
        write: (stream: any, buffer: any, offset: any, length: any, pos: any) => number;
    };
    default_tty_ops: {
        get_char: (tty: any) => any;
        put_char: (tty: any, val: any) => void;
        flush: (tty: any) => void;
    };
    default_tty1_ops: {
        put_char: (tty: any, val: any) => void;
        flush: (tty: any) => void;
    };
};
declare var MEMFS: {
    ops_table: any;
    mount: (mount: any) => any;
    createNode: (parent: any, name: any, mode: any, dev: any) => any;
    getFileDataAsRegularArray: (node: any) => any;
    getFileDataAsTypedArray: (node: any) => any;
    expandFileStorage: (node: any, newCapacity: any) => void;
    resizeFileStorage: (node: any, newSize: any) => void;
    node_ops: {
        getattr: (node: any) => {};
        setattr: (node: any, attr: any) => void;
        lookup: (parent: any, name: any) => void;
        mknod: (parent: any, name: any, mode: any, dev: any) => any;
        rename: (old_node: any, new_dir: any, new_name: any) => void;
        unlink: (parent: any, name: any) => void;
        rmdir: (parent: any, name: any) => void;
        readdir: (node: any) => string[];
        symlink: (parent: any, newname: any, oldpath: any) => any;
        readlink: (node: any) => any;
    };
    stream_ops: {
        read: (stream: any, buffer: any, offset: any, length: any, position: any) => number;
        write: (stream: any, buffer: any, offset: any, length: any, position: any, canOwn: any) => any;
        llseek: (stream: any, offset: any, whence: any) => any;
        allocate: (stream: any, offset: any, length: any) => void;
        mmap: (stream: any, buffer: any, offset: any, length: any, position: any, prot: any, flags: any) => {
            ptr: any;
            allocated: any;
        };
        msync: (stream: any, buffer: any, offset: any, length: any, mmapFlags: any) => number;
    };
};
declare var IDBFS: {
    dbs: {};
    indexedDB: () => any;
    DB_VERSION: number;
    DB_STORE_NAME: string;
    mount: (mount: any) => any;
    syncfs: (mount: any, populate: any, callback: any) => void;
    getDB: (name: any, callback: any) => any;
    getLocalSet: (mount: any, callback: any) => any;
    getRemoteSet: (mount: any, callback: any) => void;
    loadLocalEntry: (path: any, callback: any) => any;
    storeLocalEntry: (path: any, entry: any, callback: any) => any;
    removeLocalEntry: (path: any, callback: any) => any;
    loadRemoteEntry: (store: any, path: any, callback: any) => void;
    storeRemoteEntry: (store: any, path: any, entry: any, callback: any) => void;
    removeRemoteEntry: (store: any, path: any, callback: any) => void;
    reconcile: (src: any, dst: any, callback: any) => any;
};
declare var NODEFS: {
    isWindows: boolean;
    staticInit: () => void;
    mount: (mount: any) => any;
    createNode: (parent: any, name: any, mode: any, dev: any) => any;
    getMode: (path: any) => any;
    realPath: (node: any) => any;
    flagsToPermissionStringMap: {
        0: string;
        1: string;
        2: string;
        64: string;
        65: string;
        66: string;
        129: string;
        193: string;
        514: string;
        577: string;
        578: string;
        705: string;
        706: string;
        1024: string;
        1025: string;
        1026: string;
        1089: string;
        1090: string;
        1153: string;
        1154: string;
        1217: string;
        1218: string;
        4096: string;
        4098: string;
    };
    flagsToPermissionString: (flags: any) => any;
    node_ops: {
        getattr: (node: any) => {
            dev: any;
            ino: any;
            mode: any;
            nlink: any;
            uid: any;
            gid: any;
            rdev: any;
            size: any;
            atime: any;
            mtime: any;
            ctime: any;
            blksize: any;
            blocks: any;
        };
        setattr: (node: any, attr: any) => void;
        lookup: (parent: any, name: any) => any;
        mknod: (parent: any, name: any, mode: any, dev: any) => any;
        rename: (oldNode: any, newDir: any, newName: any) => void;
        unlink: (parent: any, name: any) => void;
        rmdir: (parent: any, name: any) => void;
        readdir: (node: any) => any;
        symlink: (parent: any, newName: any, oldPath: any) => void;
        readlink: (node: any) => any;
    };
    stream_ops: {
        open: (stream: any) => void;
        close: (stream: any) => void;
        read: (stream: any, buffer: any, offset: any, length: any, position: any) => any;
        write: (stream: any, buffer: any, offset: any, length: any, position: any) => any;
        llseek: (stream: any, offset: any, whence: any) => any;
    };
};
declare var WORKERFS: {
    DIR_MODE: number;
    FILE_MODE: number;
    reader: any;
    mount: (mount: any) => any;
    createNode: (parent: any, name: any, mode: any, dev: any, contents: any, mtime: any) => any;
    node_ops: {
        getattr: (node: any) => {
            dev: number;
            ino: any;
            mode: any;
            nlink: number;
            uid: number;
            gid: number;
            rdev: any;
            size: any;
            atime: Date;
            mtime: Date;
            ctime: Date;
            blksize: number;
            blocks: number;
        };
        setattr: (node: any, attr: any) => void;
        lookup: (parent: any, name: any) => void;
        mknod: (parent: any, name: any, mode: any, dev: any) => void;
        rename: (oldNode: any, newDir: any, newName: any) => void;
        unlink: (parent: any, name: any) => void;
        rmdir: (parent: any, name: any) => void;
        readdir: (node: any) => void;
        symlink: (parent: any, newName: any, oldPath: any) => void;
        readlink: (node: any) => void;
    };
    stream_ops: {
        read: (stream: any, buffer: any, offset: any, length: any, position: any) => any;
        write: (stream: any, buffer: any, offset: any, length: any, position: any) => void;
        llseek: (stream: any, offset: any, whence: any) => any;
    };
};
declare var _stdin: any;
declare var _stdout: any;
declare var _stderr: any;
declare var FS: {
    root: any;
    mounts: any[];
    devices: any[];
    streams: any[];
    nextInode: number;
    nameTable: any;
    currentPath: string;
    initialized: boolean;
    ignorePermissions: boolean;
    trackingDelegate: {};
    tracking: {
        openFlags: {
            READ: number;
            WRITE: number;
        };
    };
    ErrnoError: any;
    genericErrors: {};
    filesystems: any;
    handleFSError: (e: any) => any;
    lookupPath: (path: any, opts: any) => {
        path: string;
        node: any;
    };
    getPath: (node: any) => any;
    hashName: (parentid: any, name: any) => number;
    hashAddNode: (node: any) => void;
    hashRemoveNode: (node: any) => void;
    lookupNode: (parent: any, name: any) => any;
    createNode: (parent: any, name: any, mode: any, rdev: any) => any;
    destroyNode: (node: any) => void;
    isRoot: (node: any) => boolean;
    isMountpoint: (node: any) => boolean;
    isFile: (mode: any) => boolean;
    isDir: (mode: any) => boolean;
    isLink: (mode: any) => boolean;
    isChrdev: (mode: any) => boolean;
    isBlkdev: (mode: any) => boolean;
    isFIFO: (mode: any) => boolean;
    isSocket: (mode: any) => boolean;
    flagModes: {
        "r": number;
        "rs": number;
        "r+": number;
        "w": number;
        "wx": number;
        "xw": number;
        "w+": number;
        "wx+": number;
        "xw+": number;
        "a": number;
        "ax": number;
        "xa": number;
        "a+": number;
        "ax+": number;
        "xa+": number;
    };
    modeStringToFlags: (str: any) => any;
    flagsToPermissionString: (flag: any) => string;
    nodePermissions: (node: any, perms: any) => number;
    mayLookup: (dir: any) => number;
    mayCreate: (dir: any, name: any) => number;
    mayDelete: (dir: any, name: any, isdir: any) => any;
    mayOpen: (node: any, flags: any) => number;
    MAX_OPEN_FDS: number;
    nextfd: (fd_start: any, fd_end: any) => any;
    getStream: (fd: any) => any;
    createStream: (stream: any, fd_start: any, fd_end: any) => any;
    closeStream: (fd: any) => void;
    chrdev_stream_ops: {
        open: (stream: any) => void;
        llseek: () => void;
    };
    major: (dev: any) => number;
    minor: (dev: any) => number;
    makedev: (ma: any, mi: any) => number;
    registerDevice: (dev: any, ops: any) => void;
    getDevice: (dev: any) => any;
    getMounts: (mount: any) => any[];
    syncfs: (populate: any, callback: any) => void;
    mount: (type: any, opts: any, mountpoint: any) => any;
    unmount: (mountpoint: any) => void;
    lookup: (parent: any, name: any) => any;
    mknod: (path: any, mode: any, dev: any) => any;
    create: (path: any, mode: any) => any;
    mkdir: (path: any, mode: any) => any;
    mkdev: (path: any, mode: any, dev: any) => any;
    symlink: (oldpath: any, newpath: any) => any;
    rename: (old_path: any, new_path: any) => void;
    rmdir: (path: any) => void;
    readdir: (path: any) => any;
    unlink: (path: any) => void;
    readlink: (path: any) => any;
    stat: (path: any, dontFollow: any) => any;
    lstat: (path: any) => any;
    chmod: (path: any, mode: any, dontFollow: any) => void;
    lchmod: (path: any, mode: any) => void;
    fchmod: (fd: any, mode: any) => void;
    chown: (path: any, uid: any, gid: any, dontFollow: any) => void;
    lchown: (path: any, uid: any, gid: any) => void;
    fchown: (fd: any, uid: any, gid: any) => void;
    truncate: (path: any, len: any) => void;
    ftruncate: (fd: any, len: any) => void;
    utime: (path: any, atime: any, mtime: any) => void;
    open: (path: any, flags: any, mode: any, fd_start: any, fd_end: any) => any;
    close: (stream: any) => void;
    llseek: (stream: any, offset: any, whence: any) => any;
    read: (stream: any, buffer: any, offset: any, length: any, position: any) => any;
    write: (stream: any, buffer: any, offset: any, length: any, position: any, canOwn: any) => any;
    allocate: (stream: any, offset: any, length: any) => void;
    mmap: (stream: any, buffer: any, offset: any, length: any, position: any, prot: any, flags: any) => any;
    msync: (stream: any, buffer: any, offset: any, length: any, mmapFlags: any) => any;
    munmap: (stream: any) => number;
    ioctl: (stream: any, cmd: any, arg: any) => any;
    readFile: (path: any, opts: any) => any;
    writeFile: (path: any, data: any, opts: any) => void;
    cwd: () => string;
    chdir: (path: any) => void;
    createDefaultDirectories: () => void;
    createDefaultDevices: () => void;
    createSpecialDirectories: () => void;
    createStandardStreams: () => void;
    ensureErrnoError: () => void;
    staticInit: () => void;
    init: (input: any, output: any, error: any) => void;
    quit: () => void;
    getMode: (canRead: any, canWrite: any) => number;
    joinPath: (parts: any, forceRelative: any) => any;
    absolutePath: (relative: any, base: any) => any;
    standardizePath: (path: any) => string;
    findObject: (path: any, dontResolveLastLink: any) => any;
    analyzePath: (path: any, dontResolveLastLink: any) => {
        isRoot: boolean;
        exists: boolean;
        error: number;
        name: any;
        path: any;
        object: any;
        parentExists: boolean;
        parentPath: any;
        parentObject: any;
    };
    createFolder: (parent: any, name: any, canRead: any, canWrite: any) => any;
    createPath: (parent: any, path: any, canRead: any, canWrite: any) => string;
    createFile: (parent: any, name: any, properties: any, canRead: any, canWrite: any) => any;
    createDataFile: (parent: any, name: any, data: any, canRead: any, canWrite: any, canOwn: any) => any;
    createDevice: (parent: any, name: any, input: any, output: any) => any;
    createLink: (parent: any, name: any, target: any, canRead: any, canWrite: any) => any;
    forceLoadFile: (obj: any) => boolean;
    createLazyFile: (parent: any, name: any, url: any, canRead: any, canWrite: any) => any;
    createPreloadedFile: (parent: any, name: any, url: any, canRead: any, canWrite: any, onload: any, onerror: any, dontCreateFile: any, canOwn: any, preFinish: any) => void;
    indexedDB: () => any;
    DB_NAME: () => string;
    DB_VERSION: number;
    DB_STORE_NAME: string;
    saveFilesToDB: (paths: any, onload: any, onerror: any) => any;
    loadFilesFromDB: (paths: any, onload: any, onerror: any) => any;
};
declare var SYSCALLS: {
    DEFAULT_POLLMASK: number;
    mappings: {};
    umask: number;
    calculateAt: (dirfd: any, path: any) => any;
    doStat: (func: any, path: any, buf: any) => number;
    doMsync: (addr: any, stream: any, len: any, flags: any) => void;
    doMkdir: (path: any, mode: any) => number;
    doMknod: (path: any, mode: any, dev: any) => number;
    doReadlink: (path: any, buf: any, bufsize: any) => any;
    doAccess: (path: any, amode: any) => number;
    doDup: (path: any, flags: any, suggestFD: any) => any;
    doReadv: (stream: any, iov: any, iovcnt: any, offset: any) => number;
    doWritev: (stream: any, iov: any, iovcnt: any, offset: any) => number;
    varargs: number;
    get: (varargs: any) => any;
    getStr: () => any;
    getStreamFromFD: () => any;
    getSocketFromFD: () => any;
    getSocketAddress: (allowNull: any) => any;
    get64: () => any;
    getZero: () => void;
};
declare function ___syscall6(which: any, varargs: any): number;
declare function _sysconf(name: any): any;
declare function _sbrk(bytes: any): number;
declare function _emscripten_memcpy_big(dest: any, src: any, num: any): any;
declare var cttz_i8: any;
declare function _emscripten_set_main_loop_timing(mode: any, value: any): number;
declare function _emscripten_set_main_loop(func: any, fps: any, simulateInfiniteLoop: any, arg: any, noSetTiming: any): void;
declare var Browser: {
    mainLoop: {
        scheduler: any;
        method: string;
        currentlyRunningMainloop: number;
        func: any;
        arg: number;
        timingMode: number;
        timingValue: number;
        currentFrameNumber: number;
        queue: any[];
        pause: () => void;
        resume: () => void;
        updateStatus: () => void;
        runIter: (func: any) => void;
    };
    isFullScreen: boolean;
    pointerLock: boolean;
    moduleContextCreatedCallbacks: any[];
    workers: any[];
    init: () => void;
    createContext: (canvas: any, useWebGL: any, setInModule: any, webGLContextAttributes: any) => any;
    destroyContext: (canvas: any, useWebGL: any, setInModule: any) => void;
    fullScreenHandlersInstalled: boolean;
    lockPointer: any;
    resizeCanvas: any;
    requestFullScreen: (lockPointer: any, resizeCanvas: any, vrDevice: any) => void;
    nextRAF: number;
    fakeRequestAnimationFrame: (func: any) => void;
    requestAnimationFrame: (func: any) => void;
    safeCallback: (func: any) => () => any;
    allowAsyncCallbacks: boolean;
    queuedAsyncCallbacks: any[];
    pauseAsyncCallbacks: () => void;
    resumeAsyncCallbacks: () => void;
    safeRequestAnimationFrame: (func: any) => void;
    safeSetTimeout: (func: any, timeout: any) => number;
    safeSetInterval: (func: any, timeout: any) => number;
    getMimetype: (name: any) => any;
    getUserMedia: (func: any) => void;
    getMovementX: (event: any) => any;
    getMovementY: (event: any) => any;
    getMouseWheelDelta: (event: any) => number;
    mouseX: number;
    mouseY: number;
    mouseMovementX: number;
    mouseMovementY: number;
    touches: {};
    lastTouches: {};
    calculateMouseEvent: (event: any) => void;
    xhrLoad: (url: any, onload: any, onerror: any) => void;
    asyncLoad: (url: any, onload: any, onerror: any, noRunDep: any) => void;
    resizeListeners: any[];
    updateResizeListeners: () => void;
    setCanvasSize: (width: any, height: any, noUpdates: any) => void;
    windowedWidth: number;
    windowedHeight: number;
    setFullScreenCanvasSize: () => void;
    setWindowedCanvasSize: () => void;
    updateCanvasDimensions: (canvas: any, wNative: any, hNative: any) => void;
    wgetRequests: {};
    nextWgetRequestHandle: number;
    getNextWgetRequestHandle: () => number;
};
declare function _time(ptr: any): number;
declare function _pthread_self(): number;
declare function ___syscall140(which: any, varargs: any): number;
declare function ___syscall146(which: any, varargs: any): any;
declare function ___syscall54(which: any, varargs: any): any;
declare function invoke_ii(index: any, a1: any): any;
declare function invoke_iiii(index: any, a1: any, a2: any, a3: any): any;
declare function invoke_iiiii(index: any, a1: any, a2: any, a3: any, a4: any): any;
declare function invoke_viii(index: any, a1: any, a2: any, a3: any): void;
declare function invoke_vi(index: any, a1: any): void;
declare var asm: {
    _ZSTD_compressBound: (a: any) => number;
    _malloc: (a: any) => number;
    _i64Subtract: (a: any, b: any, c: any, d: any) => number;
    _fflush: (a: any) => number;
    _i64Add: (a: any, b: any, c: any, d: any) => number;
    _memmove: (b: any, c: any, d: any) => number;
    _ZSTD_isError: (a: any) => number;
    _memset: (b: any, d: any, e: any) => number;
    _ZSTD_compress: (a: any, b: any, d: any, e: any, f: any) => number;
    _ZSTD_getErrorName: (a: any) => number;
    _bitshift64Lshr: (a: any, b: any, c: any) => number;
    _memcpy: (b: any, d: any, e: any) => number;
    _llvm_cttz_i32: (b: any) => number;
    _ZSTD_decompress: (a: any, b: any, d: any, e: any) => number;
    _free: (a: any) => void;
    ___errno_location: () => number;
    _bitshift64Shl: (a: any, b: any, c: any) => number;
    runPostSets: () => void;
    stackAlloc: (a: any) => number;
    stackSave: () => number;
    stackRestore: (a: any) => void;
    establishStackSpace: (a: any, b: any) => void;
    setThrew: (a: any, b: any) => void;
    setTempRet0: (a: any) => void;
    getTempRet0: () => number;
    dynCall_ii: (a: any, b: any) => number;
    dynCall_iiii: (a: any, b: any, c: any, d: any) => number;
    dynCall_iiiii: (a: any, b: any, c: any, d: any, e: any) => number;
    dynCall_viii: (a: any, b: any, c: any, d: any) => void;
    dynCall_vi: (a: any, b: any) => void;
};
declare var _ZSTD_compressBound: (a: any) => number;
declare var _ZSTD_getErrorName: (a: any) => number;
declare var _i64Subtract: (a: any, b: any, c: any, d: any) => number;
declare var _fflush: (a: any) => number;
declare var runPostSets: () => void;
declare var _i64Add: (a: any, b: any, c: any, d: any) => number;
declare var _memmove: (b: any, c: any, d: any) => number;
declare var _ZSTD_isError: (a: any) => number;
declare var _memset: (b: any, d: any, e: any) => number;
declare var _ZSTD_compress: (a: any, b: any, d: any, e: any, f: any) => number;
declare var _malloc: (a: any) => number;
declare var _ZSTD_decompress: (a: any, b: any, d: any, e: any) => number;
declare var _memcpy: (b: any, d: any, e: any) => number;
declare var _llvm_cttz_i32: (b: any) => number;
declare var _bitshift64Lshr: (a: any, b: any, c: any) => number;
declare var _free: (a: any) => void;
declare var ___errno_location: () => number;
declare var _bitshift64Shl: (a: any, b: any, c: any) => number;
declare var dynCall_ii: (a: any, b: any) => number;
declare var dynCall_iiii: (a: any, b: any, c: any, d: any) => number;
declare var dynCall_iiiii: (a: any, b: any, c: any, d: any, e: any) => number;
declare var dynCall_viii: (a: any, b: any, c: any, d: any) => void;
declare var dynCall_vi: (a: any, b: any) => void;
declare function ExitStatus(status: any): void;
declare var initialStackTop: any;
declare var preloadStartTime: any;
declare var calledMain: boolean;
declare function run(args: any): void;
declare function exit(status: any, implicit: any): void;
declare var abortDecorators: any[];
declare function abort(what: any): void;
declare var shouldRunNow: boolean;
