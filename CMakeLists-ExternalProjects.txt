include(ExternalProject)

if(${BUILD_SHARED_LIBS})
	set(BUILDINGSHAREDLIBS TRUE)
	set(BUILDINGSTATICLIBS FALSE)
else()
	set(BUILDINGSHAREDLIBS FALSE)
	set(BUILDINGSTATICLIBS TRUE)
endif()


ExternalProject_Add(
  libjpeg-turbo

  GIT_REPOSITORY "https://github.com/libjpeg-turbo/libjpeg-turbo.git"
  GIT_TAG "dev"
  
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  
  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/libjpeg-turbo"
  CMAKE_ARGS -DENABLE_TESTING=FALSE -DENABLE_STATIC=${BUILDINGSTATICLIBS} -ENABLE_SHARED=${BUILDINGSHAREDLIBS} -DBUILD_SHARED_LIBS=${BUILDINGSHAREDLIBS}
  
  TEST_COMMAND ""
)

set(LIBJPEG_TURBO_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/libjpeg-turbo/include")

if(${BUILD_SHARED_LIBS})
	set(LIBJPEG_TURBO_LIBRARIES 
		${CMAKE_SHARED_LIBRARY_PREFIX}jpeg${CMAKE_SHARED_LIBRARY_SUFFIX}
		${CMAKE_SHARED_LIBRARY_PREFIX}turbojpeg${CMAKE_SHARED_LIBRARY_SUFFIX}
	)
else()
	set(LIBJPEG_TURBO_LIBRARIES 
		${CMAKE_STATIC_LIBRARY_PREFIX}jpeg-static${CMAKE_STATIC_LIBRARY_SUFFIX}
		${CMAKE_STATIC_LIBRARY_PREFIX}turbojpeg-static${CMAKE_STATIC_LIBRARY_SUFFIX}
	)
endif()
link_directories(${GLOBAL_OUTPUT_PATH}/libjpeg-turbo/lib)

if(${CUSTOM_ZLIB})
	find_package(ZLIB REQUIRED) 
else()
	link_directories(${GLOBAL_OUTPUT_PATH}/zlib/lib)
	ExternalProject_Add(
	  zlib
	  GIT_REPOSITORY "https://github.com/madler/zlib.git"
	  GIT_TAG "v1.2.11"
	  UPDATE_COMMAND ""
	  PATCH_COMMAND ""
	  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/zlib"
	  CMAKE_ARGS -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/zlib
	  TEST_COMMAND ""
	)
	set(ZLIB_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/zlib/include") 
	if(${BUILD_SHARED_LIBS})
		if(UNIX)
			set(ZLIB_LIBRARIES ${CMAKE_SHARED_LIBRARY_PREFIX}z${CMAKE_SHARED_LIBRARY_SUFFIX})
		else()
			set(ZLIB_LIBRARIES 
				optimized ${CMAKE_SHARED_LIBRARY_PREFIX}zlib${CMAKE_SHARED_LIBRARY_SUFFIX}
				debug ${CMAKE_SHARED_LIBRARY_PREFIX}zlibd${CMAKE_SHARED_LIBRARY_SUFFIX}
			)
		endif()
	else()
		if(UNIX)
			set(ZLIB_LIBRARIES ${CMAKE_STATIC_LIBRARY_PREFIX}z${CMAKE_STATIC_LIBRARY_SUFFIX})
		else()
			set(ZLIB_LIBRARIES optimized ${CMAKE_STATIC_LIBRARY_PREFIX}zlibstatic${CMAKE_STATIC_LIBRARY_SUFFIX}
					 debug ${CMAKE_STATIC_LIBRARY_PREFIX}zlibstaticd${CMAKE_STATIC_LIBRARY_SUFFIX})
		endif()
	endif()
endif()

if(${CUSTOM_OPENSSL})
	find_package(OpenSSL REQUIRED) 
else()
	link_directories(${GLOBAL_OUTPUT_PATH}/openssl/lib)
	if(${BUILD_SHARED_LIBS})
		set(OPENSSLBUILDOPTIONS no-ssl2 no-ssl3 shared no-weak-ssl-ciphers)
	else()
		set(OPENSSLBUILDOPTIONS no-ssl2 no-ssl3 no-shared no-weak-ssl-ciphers)
	endif()
	if(WIN32) 
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			# 64 bits
			set(PERLCONFIGURECOMMAND VC-WIN64A)
			set(PERLBUILDCOMMAND do_win64a)
		elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
			# 32 bits
			set(PERLCONFIGURECOMMAND VC-WIN32)
			set(PERLBUILDCOMMAND do_nasm)
		endif()
		ExternalProject_Add(
			openssl
			URL https://github.com/openssl/openssl/archive/OpenSSL_1_0_2l.tar.gz
			CONFIGURE_COMMAND perl Configure ${OPENSSLBUILDOPTIONS} ${PERLCONFIGURECOMMAND} "--prefix=${GLOBAL_OUTPUT_PATH}/openssl"
			BUILD_COMMAND "ms\\${PERLBUILDCOMMAND}.bat"
			COMMAND nmake -f "ms\\ntdll.mak"
			BUILD_IN_SOURCE 1
			INSTALL_COMMAND nmake -f "ms\\ntdll.mak" install
		)
		
		if(${BUILD_SHARED_LIBS})
			set(OPENSSL_LIBRARIES 
				${CMAKE_SHARED_LIBRARY_PREFIX}libeay32${CMAKE_SHARED_LIBRARY_SUFFIX} 
				${CMAKE_SHARED_LIBRARY_PREFIX}ssleay32${CMAKE_SHARED_LIBRARY_SUFFIX}
			)
		else()
			set(OPENSSL_LIBRARIES 
				${CMAKE_STATIC_LIBRARY_PREFIX}libeay32${CMAKE_STATIC_LIBRARY_SUFFIX} 
				${CMAKE_STATIC_LIBRARY_PREFIX}ssleay32${CMAKE_STATIC_LIBRARY_SUFFIX}
			)
		endif()
		
	else()
		if(APPLE) 
			set(CONFIGURECOMMAND ./Configure darwin64-x86_64-cc)
		else()	
			set(CONFIGURECOMMAND ./Configure linux-x86_64-clang)
		endif()
		ExternalProject_Add(
			openssl
			URL https://github.com/openssl/openssl/archive/OpenSSL_1_0_2l.tar.gz
			CONFIGURE_COMMAND ${CONFIGURECOMMAND} ${OPENSSLBUILDOPTIONS} ${PERLCONFIGURECOMMAND} "--prefix=${GLOBAL_OUTPUT_PATH}/openssl"
			BUILD_COMMAND make 
			BUILD_IN_SOURCE 1
			INSTALL_COMMAND make install
		)
		if(${BUILD_SHARED_LIBS})
			set(OPENSSL_LIBRARIES 
				${CMAKE_SHARED_LIBRARY_PREFIX}ssl${CMAKE_SHARED_LIBRARY_SUFFIX} 
				${CMAKE_SHARED_LIBRARY_PREFIX}crypto${CMAKE_SHARED_LIBRARY_SUFFIX}
			)
		else()
			set(OPENSSL_LIBRARIES 
				${CMAKE_STATIC_LIBRARY_PREFIX}ssl${CMAKE_STATIC_LIBRARY_SUFFIX} 
				${CMAKE_STATIC_LIBRARY_PREFIX}crypto${CMAKE_STATIC_LIBRARY_SUFFIX}
			)
		endif() 
	endif() 
	set(OPENSSL_INCLUDE_DIR "${GLOBAL_OUTPUT_PATH}/openssl/include") 
endif()



ExternalProject_Add(
  websocket_lite

  GIT_REPOSITORY "https://github.com/smasherprog/websocket_lite.git"
  GIT_TAG "master"
  
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  
  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/websocket_lite"
  CMAKE_ARGS -DBUILD_SHARED_LIBS=${BUILDINGSHAREDLIBS} -DCUSTOM_ZLIB=ON -DCUSTOM_OPENSSL=ON -DOPENSSL_ROOT_DIR=${GLOBAL_OUTPUT_PATH}/openssl/ -DZLIB_ROOT=${GLOBAL_OUTPUT_PATH}/zlib/
  
  TEST_COMMAND ""
)
add_dependencies(websocket_lite openssl zlib)
set(WEBSOCKET_LITE_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/websocket_lite/include")
link_directories(${GLOBAL_OUTPUT_PATH}/websocket_lite/lib)
if(${BUILD_SHARED_LIBS})
	set(WEBSOCKET_LITE_LIBRARIES 
		${CMAKE_SHARED_LIBRARY_PREFIX}websocket_lite${CMAKE_SHARED_LIBRARY_SUFFIX} 
	)
else()
	set(WEBSOCKET_LITE_LIBRARIES 
		${CMAKE_STATIC_LIBRARY_PREFIX}websocket_lite${CMAKE_STATIC_LIBRARY_SUFFIX} 
	)
endif()

ExternalProject_Add(
  input_lite

  GIT_REPOSITORY "https://github.com/smasherprog/input_lite.git"
  GIT_TAG "master"
  
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  
  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/input_lite"
  CMAKE_ARGS -DBUILD_SHARED_LIBS=${BUILDINGSHAREDLIBS} -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/input_lite
  
  TEST_COMMAND ""
)

set(INPUT_LITE_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/input_lite/include")
link_directories(${GLOBAL_OUTPUT_PATH}/input_lite/lib)
if(${BUILD_SHARED_LIBS})
	set(INPUT_LITE_LIBRARIES 
		${CMAKE_SHARED_LIBRARY_PREFIX}input_lite${CMAKE_SHARED_LIBRARY_SUFFIX} 
	)
else()
	set(INPUT_LITE_LIBRARIES 
		${CMAKE_STATIC_LIBRARY_PREFIX}input_lite${CMAKE_STATIC_LIBRARY_SUFFIX} 
	)
endif()

ExternalProject_Add(
  clipboard_lite

  GIT_REPOSITORY "https://github.com/smasherprog/clipboard_lite.git"
  GIT_TAG "master"
  
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  
  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/clipboard_lite"
  CMAKE_ARGS -DBUILD_SHARED_LIBS=${BUILDINGSHAREDLIBS} -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/clipboard_lite
  
  TEST_COMMAND ""
)

set(CLIPBOARD_LITE_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/clipboard_lite/include")
link_directories(${GLOBAL_OUTPUT_PATH}/clipboard_lite/lib)
if(${BUILD_SHARED_LIBS})
	set(CLIPBOARD_LITE_LIBRARIES 
		${CMAKE_SHARED_LIBRARY_PREFIX}clipboard_lite${CMAKE_SHARED_LIBRARY_SUFFIX} 
	)
else()
	set(CLIPBOARD_LITE_LIBRARIES 
		${CMAKE_STATIC_LIBRARY_PREFIX}clipboard_lite${CMAKE_STATIC_LIBRARY_SUFFIX} 
	)
endif()
 
ExternalProject_Add(
  screen_capture_lite

  GIT_REPOSITORY "https://github.com/smasherprog/screen_capture_lite.git"
  GIT_TAG "master"
  
  UPDATE_COMMAND ""
  PATCH_COMMAND ""
  
  SOURCE_DIR "${CMAKE_SOURCE_DIR}/libs/screen_capture_lite"
  CMAKE_ARGS -DBUILD_SHARED_LIBS=${BUILDINGSHAREDLIBS} -DCMAKE_INSTALL_PREFIX=${GLOBAL_OUTPUT_PATH}/screen_capture_lite
  
  TEST_COMMAND ""
)

set(SCREEN_CAPTURE_LITE_INCLUDE_DIRS "${GLOBAL_OUTPUT_PATH}/screen_capture_lite/include")
 link_directories(${GLOBAL_OUTPUT_PATH}/screen_capture_lite/lib)
if(${BUILD_SHARED_LIBS})
	set(SCREEN_CAPTURE_LITE_LIBRARIES 
		${CMAKE_SHARED_LIBRARY_PREFIX}screen_capture_lite${CMAKE_SHARED_LIBRARY_SUFFIX}
	)
else()
	set(SCREEN_CAPTURE_LITE_LIBRARIES 
		${CMAKE_STATIC_LIBRARY_PREFIX}screen_capture_lite${CMAKE_STATIC_LIBRARY_SUFFIX}
	)
endif()

if(WIN32)
	set(SCREEN_CAPTURE_LITE_LIBRARIES 
		${SCREEN_CAPTURE_LITE_LIBRARIES}
		Dwmapi
	)
elseif(APPLE)
	find_library(corefoundation_lib CoreFoundation)
	find_library(cocoa_lib Cocoa)
	set(SCREEN_CAPTURE_LITE_LIBRARIES 
		${SCREEN_CAPTURE_LITE_LIBRARIES}
		 ${corefoundation_lib} 
		 ${cocoa_lib}
	)
else()
	find_package(X11 REQUIRED)
	if(!X11_XTest_FOUND)
 		message(FATAL_ERROR "X11 extensions are required, but not found!")
	endif()
	if(!X11_Xfixes_LIB)
 		message(FATAL_ERROR "X11 fixes extension is required, but not found!")
	endif()
	find_package(Threads REQUIRED)
	set(SCREEN_CAPTURE_LITE_LIBRARIES 
		${SCREEN_CAPTURE_LITE_LIBRARIES}
		${X11_LIBRARIES}
		${X11_Xfixes_LIB}
		${X11_XTest_LIB}
		${X11_Xinerama_LIB}
		${CMAKE_THREAD_LIBS_INIT}
	) 
endif()


